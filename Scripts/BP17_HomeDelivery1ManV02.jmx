<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BP17_HD1Man_V2" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="pEnvURL_pt1" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_pt1</stringProp>
            <stringProp name="Argument.value">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pTimer_Random" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Random</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">basket-gateway-v1.public.eu-west-1.production.deveng.systems</stringProp>
          </elementProp>
          <elementProp name="pTimer_Min" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Min</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_bo" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_bo</stringProp>
            <stringProp name="Argument.value">basket-gateway-v1-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">basket-orchestrator-v1-pt.service.eu-west-1.staging.deveng.systems</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_ui" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_ui</stringProp>
            <stringProp name="Argument.value">notUsed</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_CIS" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_CIS</stringProp>
            <stringProp name="Argument.value">cis-gateway-v1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_BasketUI" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_BasketUI</stringProp>
            <stringProp name="Argument.value">ui-basket-bos-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_PaymentUI" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_PaymentUI</stringProp>
            <stringProp name="Argument.value">ui-payment-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.desc">ui-payment-uat2.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_CheckOutGateway" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_CheckOutGateway</stringProp>
            <stringProp name="Argument.value">checkout-gateway-v2-pt-external.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.desc">checkout-gateway-v1-pt-external.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${__machineName()}_BP17_HD1Man_V2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">600</stringProp>
        <longProp name="ThreadGroup.start_time">1481116852000</longProp>
        <longProp name="ThreadGroup.end_time">1481116852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">200</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="CSV Data Set Config_pUserId_1ManHDV02" enabled="true">
          <stringProp name="TestPlan.comments">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_HD1Man.csv</stringProp>
          <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pUserId_1ManHDV02.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="randomOrder">false</boolProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="TrolleySize" enabled="true">
          <stringProp name="maximumValue">100</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">TrolleySize</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_TrolleySize_and_ProductCount" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

int i = 0;
vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

int j = 1;
vars.put(&quot;InvalidSKUCount&quot;, String.valueOf(j));


//int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
//vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));

//1 - 90
if (( ${TrolleySize} &gt; 0) &amp;&amp;  (${TrolleySize} &lt; 91))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;2&quot;);
	}
//91-100

if (( ${TrolleySize} &gt; 91) &amp;&amp;  (${TrolleySize} &lt; 100))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;3&quot;);
	}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cisSession" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CIS}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">9805952   basket-api/v2/basket/items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_sessionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">sessionId</stringProp>
            <stringProp name="RegexExtractor.regex">sessionId=(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="logonId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonId</stringProp>
                <stringProp name="Argument.value">${pUserId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="logonPassword" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonPassword</stringProp>
                <stringProp name="Argument.value">test1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="rememberMe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rememberMe</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="storeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">storeId</stringProp>
                <stringProp name="Argument.value">10151</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="langId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">langId</stringProp>
                <stringProp name="Argument.value">110</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_pt1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/webapp/wcs/stores/servlet/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://pt1.test-arg-uk.com</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(WindowsNT6.1;WOW64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/52.0.2743.116Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://pt1.test-arg-uk.com/webapp/wcs/stores/servlet/AccessMyAccount?langId=110&amp;storeId=10151&amp;returnURL=https%3A%2F%2Fpt1.test-arg-uk.com%2Fwebapp%2Fwcs%2Fstores%2Fservlet%2FArgosStaticPageSecondLevel%3FincludeName%3Dargoscompetitions.htm%26catalogId%3D25051%26DM_PersistentCookieCreated%3Dtrue%26langId%3D110%26storeId%3D10151</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Initializaton for LoginCount and ProductIdCount" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;


//int i = 1;
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

//int matches = StringUtils.countMatches(new String(data), &quot;We&apos;re sorry but we don&apos;t&quot;);
//Currently out of stock for store collection
//LOGON_ERROR_USERNAME_INCORRECT OR errorCode

int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_Auth1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="TestPlan.comments">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue20 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue20 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_SESSIONID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_SESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_(.+?)=</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_USERACTIVITY" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_USERACTIVITY</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_AUTHENTICATION" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_AUTHENTICATION</stringProp>
            <stringProp name="RegexExtractor.regex">WC_AUTHENTICATION_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyLoginSuccessfull" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${LoginFailureCount}&quot; &gt; &quot;0&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cisSession" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CIS}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">9805952   basket-api/v2/basket/items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">callOrigin</stringProp>
                <stringProp name="Header.value">argos</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${BasketSize}</stringProp>
          <stringProp name="TestPlan.comments">${BasketSize}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Count" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/basket-api/v1/basket/items/count</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login   ${pUserId}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-argos-brand</stringProp>
                  <stringProp name="Header.value">arg</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cisSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_CIS}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">9805952   basket-api/v2/basket/items</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">callOrigin</stringProp>
                  <stringProp name="Header.value">argos</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller " enabled="true">
            <stringProp name="TestPlan.comments">${__javaScript(&quot;${ProductIdCount}&quot; !=&quot;0&quot;)}       ${JMeterThread.last_sample_ok} &amp;&amp; ${JMeterThread.last_response_code} == 400    ${__javaScript(&quot;${InvalidSKU}&quot; != 400)}</stringProp>
            <stringProp name="WhileController.condition">${__javaScript(&quot;${InvalidSKUCount}&quot; != &quot;0&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddItemToBasket" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;productId&quot;: &quot;${pProductId}&quot;,&#xd;
	&quot;quantity&quot;: 1&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/basket-api/v2/basket/items</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">9805952</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="Header">
                    <stringProp name="Header.name">sessionId</stringProp>
                    <stringProp name="Header.value">${sessionId}</stringProp>
                  </elementProp>
                  <elementProp name="x-argos-brand" elementType="Header">
                    <stringProp name="Header.name">x-argos-brand</stringProp>
                    <stringProp name="Header.value">arg</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_VerifyInvalidProdcucts" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;


String Response = new String(data);
int InvalidSKUCount = StringUtils.countMatches(Response, &quot;INVALID_PRODUCT&quot;);
vars.put(&quot;InvalidSKUCount&quot;, String.valueOf(InvalidSKUCount));
log.info(&quot;InvalidSKUCount &quot; +InvalidSKUCount);

//int matches = StringUtils.countMatches(new String(data), &quot;INVALID_PRODUCT&quot;);
//vars.put(&quot;InvalidSKUCount&quot;, String.valueOf(matches));

//
//log.info(&quot;constructed sku is : &quot;+InvalidSKUCount);

//int matches = StringUtils.countMatches(new String(data), &quot;\&quot;catentryId\&quot;:\&quot;&quot;);
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(matches));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_INVALID_PRODUCT" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">INVALID_PRODUCT</stringProp>
                <stringProp name="RegexExtractor.regex">:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">VALID_PRODUCT</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_InvalidSKU" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">InvalidSKU</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="RandCSVGuestReservation_pPartNumbers" enabled="true">
                <stringProp name="TestPlan.comments">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_HD1Man.csv</stringProp>
                <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_HD1Man.csv</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="variableNames">pProductId</stringProp>
                <boolProp name="randomOrder">false</boolProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="rewindOnTheEndOfList">true</boolProp>
                <boolProp name="independentListPerThread">false</boolProp>
              </com.blazemeter.jmeter.RandomCSVDataSetConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
                <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
              </GaussianRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBasket" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_BasketUI}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="x-argos-brand" elementType="Header">
                <stringProp name="Header.name">x-argos-brand</stringProp>
                <stringProp name="Header.value">arg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_pPostCodes" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">pPostCodes</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;deliverTo&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="TestPlan.comments">&quot;deliverTo&quot;:&quot;B74AX&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliverable" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliverable</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;deliverable&quot;:(.*?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_productIdCount" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">productIdCount</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;productId&quot;:&quot;(.*?)&quot;,&quot;collection&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="TestPlan.comments">&quot;productId&quot;:&quot;(.*?)&quot;,&quot;collection&quot;</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_itemId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">itemId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;itemId&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_basketFound" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">basketFound</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.collection.collectable</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_postCodes" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pPostCodes</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.deliverTo</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pStoreId" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.collectFrom</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_productId_collectionStockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.items[?(@.collection.available==true)].productId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="TestPlan.comments">$.availability.items[*].productId     </stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_ContructURLforProducts" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//log.info(&quot;productid is : &quot; + vars.get(&quot;productId&quot;));

String finalcount1 = vars.get(&quot;productIdCount_matchNr&quot;);
int finalcount = 0;
finalcount = Integer.parseInt(finalcount1);


log.info(&quot;productid count is-----------&gt;&quot;+finalcount);
String sku=&quot;&quot;;
String line=&quot;&quot;;

for (int i = 1; i &lt;= finalcount; i++)
{
	line=vars.get(&quot;productIdCount_&quot;+i);
  //   log.info(&quot;productid count is-----------&gt;&quot;+line);

     if(i == finalcount)
     {
     //sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1}&quot;;
     sku = sku+&quot;{\&quot;productId\&quot;:\&quot;&quot;+line+&quot;\&quot;,\&quot;quantity\&quot;:1}&quot;;
     }
     
	else
		{
	//	sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1},&quot;;
		sku = sku+&quot;{\&quot;productId\&quot;:\&quot;&quot;+line+&quot;\&quot;,\&quot;quantity\&quot;:1},&quot;;
		}
	
	}

vars.put(&quot;sku&quot;,sku);

log.info(&quot;constructed sku is : &quot;+sku);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_OOS_Collectable" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

String CollectableCount;
String Data;

//collection&quot;:{&quot;collectable&quot;:true 

log.info(&quot;data is : &quot; +data);
int matches = StringUtils.countMatches(new String(data), &quot;collectable\&quot;:true&quot;);
vars.put(&quot;CollectableCount&quot;, String.valueOf(matches));


//CollectableCount = Integer.parseInt(CollectableCount);
vars.put(&quot;CollectableCount&quot;,CollectableCount);

log.info(&quot;CollectableCount is : &quot; +CollectableCount);


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue17 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue17 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_BasketUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Count" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v1/basket/items/count</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login   ${pUserId}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-argos-brand</stringProp>
                <stringProp name="Header.value">arg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBasket" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v2/basket</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="x-argos-brand" elementType="Header">
                <stringProp name="Header.name">x-argos-brand</stringProp>
                <stringProp name="Header.value">arg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.collectFrom</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pPostCodes" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pPostCodes</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.deliverTo</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.delivery.deliverable</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_basketFound" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">basketFound</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_itemId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">itemId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;itemId&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_productId" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.items[?(@.collection.available==true)].productId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_productId_deliveryStockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.items[?(@.delivery.available==true)].productId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_ContructURLforProducts" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String finalcount1 = vars.get(&quot;productId_matchNr&quot;);
int finalcount = 0;
finalcount = Integer.parseInt(finalcount1);

//log.info(&quot;productid count is-----------&gt;&quot;+finalcount);
String sku=&quot;&quot;;
String line=&quot;&quot;;

for (int i = 1; i &lt;= finalcount; i++)
{
	line=vars.get(&quot;productId_&quot;+i);
  //   log.info(&quot;productid count is-----------&gt;&quot;+line);

     if(i == finalcount)
     {
     sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:3}&quot;;
     }
     
	else
		{
		sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:3},&quot;;
		}
	
	}

vars.put(&quot;sku&quot;,sku);

log.info(&quot;constructed sku is : &quot;+sku);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LocaliseBasket" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;deliverTo&quot;: &quot;NE11EE&quot;,&#xd;
&quot;collectFrom&quot;: &quot;9044&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v2/basket:localise</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">SG11XN  ${pPostCodes}   ${pPostCodes_1}   ${pStoreId_1}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="Header">
                <stringProp name="Header.name">sessionId</stringProp>
                <stringProp name="Header.value">${sessionId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_StoreId" enabled="false">
            <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pStorelist.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">pStoreId_1</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.delivery.deliverable</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pStoreName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

vars.put(&quot;stockCheck_1&quot;, String.valueOf(stockCheck_local_1));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBasket" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v2/basket</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="sessionId" elementType="Header">
                <stringProp name="Header.name">sessionId</stringProp>
                <stringProp name="Header.value">${sessionId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_itemId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">itemId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;itemId&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_basketFound" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">basketFound</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.delivery.deliverable</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_postCodes" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pPostCodes</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.deliverTo</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.collectFrom</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyGetBasket" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${basketFound}&quot; == &quot;404&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckoutBasket_1ManHD" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;items&quot;:[${sku}],&quot;collectFrom&quot;:&quot;&quot;,&quot;deliverTo&quot;:&quot;HP66RU&quot;,&quot;fulfilmentType&quot;:&quot;delivery&quot;,&quot;salesChannel&quot;:&quot;WEB&quot;,&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v3/basket:checkout</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${pPostCodes}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="fulfilment" elementType="Header">
                <stringProp name="Header.name">fulfilment</stringProp>
                <stringProp name="Header.value">delivery</stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}/basket</stringProp>
              </elementProp>
              <elementProp name="x-argos-brand" elementType="Header">
                <stringProp name="Header.name">x-argos-brand</stringProp>
                <stringProp name="Header.value">arg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fulfilment" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">delivery</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">fulfilment</stringProp>
              </elementProp>
              <elementProp name="deliverTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">HP66RU</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deliverTo</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_pt1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/webapp/wcs/stores/servlet/Checkout</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain  ${pPostCodes_1}  ${pPostCodes}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://pt1.test-arg-uk.com/product/5444795</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_userId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">userId</stringProp>
            <stringProp name="RegexExtractor.regex">userId=(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_authToken3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authToken3</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;(.*?)&quot; id=&quot;authtoken_1&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_OutOfStockCount" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

// This should be changed based on the message as shown below
int matches = StringUtils.countMatches(new String(data), &quot;We are sorry but all your items are currently out of stock at your local warehouse&quot;);
vars.put(&quot;OutOfStockCount&quot;, String.valueOf(matches)); </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_SlotCount" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

int matches = StringUtils.countMatches(new String(data), &quot;&lt;div class=\&quot;customRadioUnchecked radioCell marginLeft20 paddingBtm10\&quot; name=\&quot;&quot;);
vars.put(&quot;SlotCount&quot;, String.valueOf(matches));


//log.info(&quot;start IF statement&quot;);
if (vars.get(&quot;SlotCount&quot;).equals(&quot;0&quot;))
{
//int SlotCount = &quot;1&quot;;
//log.info(&quot;Slot Not Aavilable&quot;);
vars.put(&quot;SlotCount&quot;, &quot;1&quot;);
//log.info(&quot;Slot Not Aavilable1&quot;);
}

else
{
log.info(&quot;Slot Available and SlotCount is: &quot; + vars.get(&quot;SlotCount&quot;));
}
 </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_contactAddress" enabled="true">
            <stringProp name="TestPlan.comments">uk.co.argos.ecommerce.checkout.yourdetails.data.AddressDTO%4034513451</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">contactAddress</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;contactAddress&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_email" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;suryakanth.kelmani@gmail.com&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">email</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryAddressId" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddressId&quot; value=&quot;307354913&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryAddressId</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddressId&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryAddress1" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddress1&quot; value=&quot;Pinner&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryAddress1</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddress1&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryAddress2" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddress2&quot; value=&quot;&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryAddress2</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryAddress2&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_personTitle" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryPersonTitle&quot; value=&quot;Mr&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">personTitle</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryPersonTitle&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryFirstName" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryFirstName&quot; value=&quot;Suryakanth&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryFirstName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryFirstName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryLastName" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryLastName&quot; value=&quot;Kelmani&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryLastName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryLastName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryCity" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryCity&quot; value=&quot;London&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryCity</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryCity&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_postcode" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;postcode&quot; value=&quot;IG3 8TR&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">postcode</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;postcode&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_zipCode" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;zipCode&quot; value=&quot;IG3 8TR&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">zipCode</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;zipCode&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_deliveryHouseNumber" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;deliveryHouseNumber&quot; value=&quot;72 Pinner Court&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">deliveryHouseNumber</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;deliveryHouseNumber&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_item_partNumber1" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;item_partNumber&quot; value=&quot;4026451&quot; id=&quot;adsiPartNumber&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">item_partNumber</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;item_partNumber&quot; value=&quot;(.*?)&quot; id=&quot;adsiPartNumber&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_item_partNumber2" enabled="false">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;item_partNumber&quot; value=&quot;4026451&quot; id=&quot;adsiPartNumber&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">item_partNumber2</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;item_partNumber&quot; value=&quot;(.*?)&quot; id=&quot;adsiPartNumber&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_postCodeForDelivery" enabled="true">
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;postCodeForDelivery&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">postCodeForDelivery</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;postCodeForDelivery&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_adsiSlot1Count" enabled="true">
            <stringProp name="TestPlan.comments"> ${__Random(1, ${SlotCount}, randSelection)} &lt;div class=&quot;customRadioUnchecked radioCell marginLeft20 paddingBtm10&quot; name=&quot;4*4134-3*3*19:00:00*22:00:00*2017-01-12*3.95*8&quot;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">adsiSlot1Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;div class=&quot;customRadioUnchecked radioCell marginLeft20 paddingBtm10&quot; name=&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_adsiSlot1" enabled="true">
            <stringProp name="TestPlan.comments"> ${__Random(1, ${SlotCount}, randSelection)} &lt;div class=&quot;customRadioUnchecked radioCell marginLeft20 paddingBtm10&quot; name=&quot;4*4134-3*3*19:00:00*22:00:00*2017-01-12*3.95*8&quot;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">adsiSlot1</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;div class=&quot;customRadioUnchecked radioCell marginLeft20 paddingBtm10&quot; name=&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">${__Random(1,${SlotCount},RandSlotSelection)}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_encADSI" enabled="true">
            <stringProp name="TestPlan.comments">true&amp;encADSI=F4%2fkl2JC%2foi2amK%2fpzneb9oPlvJxykzujlEu%2fUbvN2ymrdPnZvrZ%2fdveoD4y7tYPl4xbOxb%2f0yoA%0aLI5M6jwM5XSeCLG7nnfUCVN8qmGBfvfjuONq5W3FIFZcQM0BOxamSv%2f2NonbGlCAvLFsnFK23A%3d%3d&amp;adsiFlag=true&quot;&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">encADSI</stringProp>
            <stringProp name="RegexExtractor.regex">true&amp;encADSI=(.*?)&amp;hmcADSI</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">${RandSlotSelection}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_adsiSlot" enabled="true">
            <stringProp name="TestPlan.comments">&quot; id=&quot;adsiDeliverySlotRadio&quot; value=&quot;22&quot;&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">adsiSlot</stringProp>
            <stringProp name="RegexExtractor.regex">&quot; id=&quot;adsiDeliverySlotRadio&quot; value=&quot;(.*?)&quot;&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">${RandSlotSelection}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_hmcADSI" enabled="true">
            <stringProp name="TestPlan.comments">hmcADSI=6f7bc3ac30be9415419fe3b0669e71b33ed6fdb6df06e8863c873326f86b4c50&amp;adsiFlag=true&quot;&gt;</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">hmcADSI</stringProp>
            <stringProp name="RegexExtractor.regex">hmcADSI=(.*?)&amp;adsiFlag=true&quot;&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">${RandSlotSelection}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyOutOfStock" enabled="true">
          <stringProp name="IfController.condition">&quot;${OutOfStockCount}&quot; &gt; &quot;1&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_Check for Slot exists" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${adsiSlot1Count_matchNr}&quot; &gt; &quot;0&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">${__javaScript(&quot;${LoginFailureCount}&quot; &gt; &quot;0&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ArgosDeliveryAvailability" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="checkoutFromApps" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">checkoutFromApps</stringProp>
                </elementProp>
                <elementProp name="deliveryAddress1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryAddress1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryAddress1</stringProp>
                </elementProp>
                <elementProp name="deliveryAddress2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryAddress2</stringProp>
                </elementProp>
                <elementProp name="deliveryPersonTitle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personTitle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryPersonTitle</stringProp>
                </elementProp>
                <elementProp name="deliveryFirstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryFirstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryFirstName</stringProp>
                </elementProp>
                <elementProp name="deliveryLastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryLastName</stringProp>
                </elementProp>
                <elementProp name="deliveryState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryState</stringProp>
                </elementProp>
                <elementProp name="deliveryCity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryCity}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryCity</stringProp>
                </elementProp>
                <elementProp name="deliveryZipCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${zipCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryZipCode</stringProp>
                </elementProp>
                <elementProp name="deliveryPhone2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">07777777777</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryPhone2</stringProp>
                </elementProp>
                <elementProp name="deliveryPhone1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryPhone1</stringProp>
                </elementProp>
                <elementProp name="deliveryHouseNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryHouseNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryHouseNumber</stringProp>
                </elementProp>
                <elementProp name="deliveryCountry" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">United Kingdom</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryCountry</stringProp>
                </elementProp>
                <elementProp name="deliveryAddressId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryAddressId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliveryAddressId</stringProp>
                </elementProp>
                <elementProp name="isCheckoutFlow" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isCheckoutFlow</stringProp>
                </elementProp>
                <elementProp name="loginReturnAction" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">submitTrolleyFormForHomeDelivery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loginReturnAction</stringProp>
                </elementProp>
                <elementProp name="selectedZipcode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selectedZipcode</stringProp>
                </elementProp>
                <elementProp name="capeDeliveryAddressId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryAddressId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">capeDeliveryAddressId</stringProp>
                </elementProp>
                <elementProp name="houseno" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryHouseNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">houseno</stringProp>
                </elementProp>
                <elementProp name="lastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lastName</stringProp>
                </elementProp>
                <elementProp name="personTitle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personTitle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">personTitle</stringProp>
                </elementProp>
                <elementProp name="d" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">d</stringProp>
                </elementProp>
                <elementProp name="lookupReturnURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DoLookupAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lookupReturnURL</stringProp>
                </elementProp>
                <elementProp name="houseNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryHouseNumber}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">houseNumber</stringProp>
                </elementProp>
                <elementProp name="sendMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">sendReceiveImmediate</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sendMode</stringProp>
                </elementProp>
                <elementProp name="postcode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${postcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">postcode</stringProp>
                </elementProp>
                <elementProp name="zipCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${zipCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">zipCode</stringProp>
                </elementProp>
                <elementProp name="viewName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">ArgosDeliveryNodeRequestXMLMsgView</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewName</stringProp>
                </elementProp>
                <elementProp name="postCodeForDelivery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${postCodeForDelivery}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">postCodeForDelivery</stringProp>
                </elementProp>
                <elementProp name="reqFromISDB" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reqFromISDB</stringProp>
                </elementProp>
                <elementProp name="tabletUser" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tabletUser</stringProp>
                </elementProp>
                <elementProp name="delivery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">del</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">delivery</stringProp>
                </elementProp>
                <elementProp name="contactAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${contactAddress}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contactAddress</stringProp>
                </elementProp>
                <elementProp name="setaddresswithpostcodefrombasket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">setaddresswithpostcodefrombasket</stringProp>
                </elementProp>
                <elementProp name="firstName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deliveryFirstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">firstName</stringProp>
                </elementProp>
                <elementProp name="email" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${email}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">email</stringProp>
                </elementProp>
                <elementProp name="storeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">10151</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">storeId</stringProp>
                </elementProp>
                <elementProp name="langId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">110</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">langId</stringProp>
                </elementProp>
                <elementProp name="thisPage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DoLookupAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thisPage</stringProp>
                </elementProp>
                <elementProp name="authToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${authToken3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">authToken</stringProp>
                </elementProp>
                <elementProp name="item_partNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${item_partNumber_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">item_partNumber</stringProp>
                </elementProp>
                <elementProp name="item_partNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${item_partNumber_2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">item_partNumber</stringProp>
                </elementProp>
                <elementProp name="item_partNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${item_partNumber_3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">item_partNumber</stringProp>
                </elementProp>
                <elementProp name="adsiSlot" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${adsiSlot}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">adsiSlot</stringProp>
                </elementProp>
                <elementProp name="adsiSlot1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${adsiSlot1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">adsiSlot1</stringProp>
                </elementProp>
                <elementProp name="encADSI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${encADSI}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encADSI</stringProp>
                </elementProp>
                <elementProp name="hmcADSI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${hmcADSI}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hmcADSI</stringProp>
                </elementProp>
                <elementProp name="deliverAdsiPage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deliverAdsiPage</stringProp>
                </elementProp>
                <elementProp name="delivery_instructions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">delivery_instructions</stringProp>
                </elementProp>
                <elementProp name="authToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${authToken3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">authToken</stringProp>
                </elementProp>
                <elementProp name="capeDelCharge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5.99</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">capeDelCharge</stringProp>
                </elementProp>
                <elementProp name="setaddresswithpostcodefrombasket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">setaddresswithpostcodefrombasket</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_pt1}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/webapp/wcs/stores/servlet/ArgosDeliveryAvailability</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://pt1.test-arg-uk.com/webapp/wcs/stores/servlet/DoLookupAddress?d=2&amp;krypto=8mWiQOcapPXrtbKyVceSN%2BQTy9nCCp0mekuH3CW%2FpWpE%2BhrDWx8fxWoIQsScIXuQAf0q6LoYXI3n%0A8v0acjjPJB6T%2FEnzwF7wmMUpxiMz946R%2BVMiMPCCCK9cE1u5CsW5N5b8eQGZ%2BwOMqT7mvkRcqhhH%0AKm4929Oc7ZAUEPa%2FL%2BGpPxoaRPd%2BUZvc0jqAl%2Fd9wOW0GHBiCCCC5zDOAlW5S6Kzn2trVqnxxvMh%0AKwiBIr7tdby%2FHUT8SiS0rAYAyLqGcCobyr1hkK9ubqGZ6Pmy21i75P%2Bzrfte8GfwivUrX%2FMOd6kP%0AGAVK8FgTzMeBtJpyXENVUhRvTQcEArojcrojij0v2YGtG0%2Bblo4PM2Iak%2FuyzM4ayEEDjq0zjLCf%0A1doQvnhuaKR%2BKmVEagGgEOt0TXfOI3XI8X0MoTXBR4jQ%2ByleJ4m76lE%2BdKHig3BuMX3zE52KOFFl%0AHojZS0CSUaQLXgPHUuav8Ao%2BeCf5vEctY5B9ASZ19fItEqTE8cHKx7Vx7n9qTMPYMP8HFLvGwQiD%0ApM5sygyHIbLe662bCjFspxvHwDAji6UM83zzJuOgsgpV56oQft5YEgueIlZzw%2B8hd1WVGJ6HdtJN%0AnB1TrDtu3sI%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://pt1.test-arg-uk.com</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_DinoPageError" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">DinoPage</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_authToken3" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;1819606332%2ccgEKZ8pO3zGRnk6Vx4eVPwZaDEk%3d&quot; id=&quot;authtoken_1&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">authToken3</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;(.*?)&quot; id=&quot;authtoken_1&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_amountValue" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;8.99000&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">amountValue</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_unavailableDeliveryOrder" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;unavailableDeliveryOrder&quot; value=&quot;3496840357&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">unavailableDeliveryOrder</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;unavailableDeliveryOrder&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_availableDeliveryOrder" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;availableDeliveryOrder&quot; value=&quot;3496840356&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">availableDeliveryOrder</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;availableDeliveryOrder&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_orderId" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot; value=&quot;3496840356&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">orderId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_sessionid" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;orderId&quot; value=&quot;3496840356&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sessionId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;sessionId&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="TestPlan.comments">Total Time in ms = ${pTimer_Min} + ${pTimer_Random} , in other words Gaussian random timer delays each user request for a random amount of time added to fixed time between each request</stringProp>
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyAD_DinaPage error" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(&quot;${DinoPage}&quot; == &quot;500&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration"></stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeliveryHandover" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_PaymentUI}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout/delivery-handover?catalogId=10001&amp;langId=110&amp;storeId=10151</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">sessionId 1a3f847d3fb24f3ea02e1408dd2d9c9f      nudata 0000vdPO-Zgj6bYFYixfbiqOGjq:1e1u4r0r6</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https//pt1.test-arg-uk.com/webapp/wcs/stores/servlet/ArgosDeliveryAvailability</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_snapshotId" enabled="true">
              <stringProp name="TestPlan.comments">Location: /checkout/1a57f063-8f11-4457-b467-f3b12524c42d     &quot;&gt;/(.*?)/payment&lt;    </stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">snapshotId</stringProp>
              <stringProp name="RegexExtractor.regex">checkout/(.*?)/payment</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_authToken4" enabled="true">
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;1819606332%2ccgEKZ8pO3zGRnk6Vx4eVPwZaDEk%3d&quot; id=&quot;authtoken_1&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">authToken4</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;(.*?)&quot; id=&quot;authtoken_1&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor_transfer_Cookies" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie 
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_PaymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddPCI_card" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;paymentMethod&quot;: &quot;CARD_DEBIT&quot;,&#xd;
	&quot;currency&quot;: &quot;GBP&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${snapshotId}/payments</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Checkout-User-Id" elementType="Header">
                  <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                  <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_collectionId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">collectionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&quot;id&quot;:&quot;9a09699c-b251-4bf0-8fd2-d1c69a045852&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_selectedStoreMapURL" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">selectedStoreMapURL</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;selectedStoreMapURL&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_orderItemId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">orderItemId</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;orderItemId&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue17 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue17 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 


log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="false">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie 
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);




// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1450580453">200
201</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">38</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSnapshot" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${snapshotId}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/StoreAvailabilityView?krypto=nvmwUpZwOUJP0l8sVCJ2WDKPRAWiM3%2B04CHb1%2Fs3V%2FBbFj4vfoxpiWplh41S5QvifMgIwHB2omp2%0AAAb56ymJtL6qsJUifDkGVC39tk4dJvtfZPhqPs1zjWtj9TuSid7jMWwSjhb0IL0ijlAiIGYesK8r%0ApZOW6vXrCVVbCkxa7mgeHdRTuOWIKmVTHd9q4cR%2Fh9uTLfaR3ynHYRHb9fNJSzurk4g2bbWY5EFS%0ALsKEnhrplNqZGRtJ4GUSSpSkh2IdT5GcOjiIdu500QNsSFeyHJskqCpw6JgFdlxa0B73NRI7IJU%2F%0Asl%2BZ5CJs9LRDJ2EHNkVrI%2FCb8y3o8BqoHjw5xNSLjFskrvhq08uy2icffyRoJQ8HvE54gGjLX2V8%0AGCjT3arG3zrKy8P%2FHi9mzj0fYyFggZ4UbqYqZ9XVHV9J75M%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Checkout-User-Id" elementType="Header">
                  <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                  <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_HPS_SessionID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">HPS_SessionID</stringProp>
              <stringProp name="RegexExtractor.regex">HPS_SessionID=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_availablePrepayOrder" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">availablePrepayOrder</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;availablePrepayOrder&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_amountValue" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">amountValue</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_title" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">title</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;title&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_foreName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">foreName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;foreName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_surName" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">surName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;surName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1739107845">200
201
202</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">38</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PayServicePlaceOrder" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${snapshotId}:place</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">checkout/92f4bf5c-6229-4edc-9114-f95d1120d393</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/PrepayOnlyPaymentInfo?catalogId=1500002951&amp;storeId=10151&amp;langId=110&amp;krypto=v%2Bv%2B7Dz2q8iLMiIBHPFx1BTX1VTvTGfwdjW%2FogT4L9%2BIdZbIJechexJ0YLYWKUdEYfJQxzNwzgRq%0AmXSK5kUI7mbBSo3Vh0iCkaEoUEz%2BfCWt%2BtfnJ9W9wsz81M%2FgAdddbGzkxtsR3j4aDzSc32t7QIt1%0AmHExccwR5kNqnoQruaFmuofoB54ZKsCFbMrNqPLmwH9IyT%2BsmbK35eRFzyqQ1M6%2Bead%2FGAXhlRqz%0AuYK%2BO8sujNEPlhG12s6w6RnpXsNBgkMJ2sGM208yvXt%2FC%2BcwM4VaVcVJfF%2B7ADUDKRIUZnpoAzC6%0AGX4oR8T098Jtnrq7ocAw6PSa3B54T844WD4JfVmysnD3j6fHfU3tu2D4KMhT9WmgCZbCi5Y%2B%2Fs3a%0AZbo79IG9TX9XEaBwmj3Jf41O4YlUhMYJRiGnVf5eRn8N9YXtwEw8ndQ2SH%2BQKSc3Pa2BpfD0J7e%2B%0AQnoCnvK342zM1YclVcIzaRbJk5JBR%2BLGt2z1Zv3o%2BVLdNfhO8zyl1vWBP7KhCWDEnTpfe4hCM4C8%0Aicd2g00QSXNRtnEEUTADerDDur6YlbAI1zTiBdtkw3FTj7y8QQJ6S7F8dgReh9DhFYnyHTjnIxSa%0A0B7kBMAeWT5m0rMv%2FAgtyIwzQ9y2g4k0SoKZvRvRrgQ81jv%2BKmvaPx%2BdE%2BxJiLSL2WCQ0SUnWR3p%0AmVopNKJIw0imqgaqQdo4x99e1FQtQ%2Bygu%2BRrwFoCuXOO3rX13%2BROWpTHSsvgWKEhsG%2Bm3B5imRy9%0AnRTA1s%2BZT%2BWLXTQfuV2t1BYXa8c5mGRCWmXTcf4TnjWNJqqIxA5WIWWHET%2B8scxgqT3NZe0Bpudp%0AZt17DkYJLzX1snmCPDETjqCMV0AyB5%2FNovkktJhGNvDGBM1x7S7KwhxZZRWFIeJugFI9I6uPmYoN%0AUuLLYk4y4hkTV52ttcWpRU76P59xCFHOTZAUnmua0mZyblLzGcXoZARwEpjE2iHHkWlfyQF0GVKy%0AtteKxb3OI1ocP3bDdpodh6UkXHgUEWI1DfQR3B0m%2F3m%2BfHRvQRMLid34PC%2Buqyzncag4CKIi0AOr%0A1REM9XRHrgoC2bvcXBIXTBLeFJZtFcp9z1lZlTNE1qhRpVIqYtz4uyrQEgWf9gImBU%2FGm%2FQodHUt%0A%2FNWyGsmpvZdOJpuaSnZBAkzfUi4HE%2B0l%2BSUDB0y4CG%2BDA17NIrKnh1%2Bg6W47jnnYzJQEP%2BVkHzEW%0AU7535Skk5yfkPMHC8JMLxsYpqeRP0RO8KHrwcspfFbc%3D</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Checkout-User-Id" elementType="Header">
                  <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                  <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor_transfer_Cookies" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie 
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CheckOutGatewayymentUI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_orderId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">orderId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_hash" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">hash</stringProp>
              <stringProp name="RegexExtractor.regex">hash&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1295060141">200201202</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">38</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">&quot;productId&quot;:&quot;(.*?)&quot;,&quot;collection&quot;</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
