<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BP01_NewPrePayCheckoutGatewayv2_V1" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="pEnvURL_pt1" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_pt1</stringProp>
            <stringProp name="Argument.value">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"> www.argos.co.uk   uat2.test-arg-uk.com</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_bo" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_bo</stringProp>
            <stringProp name="Argument.value">basket-argos-basket-api-gateway-pt.int.stg.jspaas.uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">basket-orchestrator-v1-prod-aws.public.eu-west-1.production.deveng.systems</stringProp>
          </elementProp>
          <elementProp name="pCisURL" elementType="Argument">
            <stringProp name="Argument.name">pCisURL</stringProp>
            <stringProp name="Argument.value">cis-gateway-v1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pTimer_Random" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Random</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pTimer_Min" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Min</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_AccountService" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_AccountService</stringProp>
            <stringProp name="Argument.value">account-service-v1-pt.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_CheckOutGateway" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_CheckOutGateway</stringProp>
            <stringProp name="Argument.value">argos-checkout-checkout-gateway-pt.int.stg.jspaas.uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">argos-checkout-checkout-gateway-pt.ext.stg.jspaas.uk</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_PaymentUI" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_PaymentUI</stringProp>
            <stringProp name="Argument.value">argos-checkout-ui-payment-pt1.int.stg.jspaas.uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ui-payment-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_BasketUI" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_BasketUI</stringProp>
            <stringProp name="Argument.value">basket-argos-basket-ui-pt.int.stg.jspaas.uk</stringProp>
            <stringProp name="Argument.desc">ui-basket-bos-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">basket-orchestrator-v1-ao-pt1.public.eu-west-1.staging.deveng.systems  </stringProp>
      </Arguments>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="NPAC" elementType="Cookie" testname="NPAC">
            <stringProp name="Cookie.value">true</stringProp>
            <stringProp name="Cookie.domain">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="Basket_Prepay_Override" elementType="Cookie" testname="Basket_Prepay_Override">
            <stringProp name="Cookie.value">true</stringProp>
            <stringProp name="Cookie.domain">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="Checkout_Test_Group_1" elementType="Cookie" testname="Checkout_Test_Group_1">
            <stringProp name="Cookie.value">2</stringProp>
            <stringProp name="Cookie.domain">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${__machineName()}_BP05_PrePayCheckoutGatewayv2_V1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">600</stringProp>
        <longProp name="ThreadGroup.start_time">1481116852000</longProp>
        <longProp name="ThreadGroup.end_time">1481116852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">200</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_userIds and password" enabled="true">
          <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pUserId_PrePayV71.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <stringProp name="TestPlan.comments">C:\apache-jmeter-5.4\bin\NewPrePay\Data\pUserId_PrePayV71.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="TrolleySize" enabled="true">
          <stringProp name="maximumValue">100</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">TrolleySize</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_TrolleySize_and_ProductCount" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

int i = 0;
vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));


//int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
//vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));

//1 - 90
if (( ${TrolleySize} &gt; 0) &amp;&amp;  (${TrolleySize} &lt; 91))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;2&quot;);
	}
//91-100

if (( ${TrolleySize} &gt; 91) &amp;&amp;  (${TrolleySize} &lt; 100))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;3&quot;);
	}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cis" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pCisURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login   ${pUserId}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(WindowsNT6.1;WOW64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/52.0.2743.116Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_sessionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">sessionId</stringProp>
            <stringProp name="RegexExtractor.regex">sessionId=(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="logonId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonId</stringProp>
                <stringProp name="Argument.value">${pUserId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="logonPassword" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonPassword</stringProp>
                <stringProp name="Argument.value">test1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="rememberMe" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">rememberMe</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="storeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">storeId</stringProp>
                <stringProp name="Argument.value">10151</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="langId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">langId</stringProp>
                <stringProp name="Argument.value">110</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_pt1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/webapp/wcs/stores/servlet/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">boffins.test.5@gmail.com/Welcome123 sandeepspai@gmail.com qwertyui123</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(WindowsNT6.1;WOW64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/52.0.2743.116Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Initializaton for LoginCount and ProductIdCount" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;


//int i = 1;
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

//int matches = StringUtils.countMatches(new String(data), &quot;We&apos;re sorry but we don&apos;t&quot;);
//Currently out of stock for store collection
//LOGON_ERROR_USERNAME_INCORRECT OR errorCode

int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_Auth1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="TestPlan.comments">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_SESSIONID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_SESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_(.+?)=</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_USERACTIVITY" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_USERACTIVITY</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_AUTHENTICATION" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_AUTHENTICATION</stringProp>
            <stringProp name="RegexExtractor.regex">WC_AUTHENTICATION_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyLoginSuccessfull" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${LoginFailureCount}&quot; &gt; &quot;0&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout_Prepare" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;storeId&quot;:&quot;${pStoreId_1}&quot;,&quot;products&quot;:[{&quot;product&quot;:{&quot;id&quot;:${sku1},&quot;title&quot;:&quot;Duracell Plus Alkaline AAA Batteries - Pack of 4&quot;},&quot;quantity&quot;:1},{&quot;product&quot;:{&quot;id&quot;:${sku2},&quot;title&quot;:&quot;Duracell Plus Alkaline AAA Batteries - Pack of 4&quot;},&quot;quantity&quot;:1}],&quot;source&quot;:{&quot;ipAddress&quot;:&quot;10.104.68.222&quot;,&quot;salesChannel&quot;:&quot;WEB&quot;,&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;}, &quot;fulfilment&quot;:&quot;COLLECTION&quot;}&#xd;
&#xd;
&#xd;
/*{&quot;storeId&quot;:&quot;${pStoreId_1}&quot;,&quot;products&quot;:[${sku}],&quot;source&quot;:{&quot;salesChannel&quot;:&quot;WEB&quot;,&quot;userAgent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;}, &quot;fulfilment&quot;:&quot;COLLECTION&quot;}&#xd;
*/&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor_Selection of 2to3 items from a csv file" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.io.FileReader;
import org.apache.commons.lang3.StringUtils;
import java.util.Random;
import java.util.ArrayList;


	int fileLimit = 26000;
	int finalcount =${BasketSize};



/* c:\apache-jmeter-3.3\bin\Argos_PerformanceProjects\Data\pPartNumbers_PrePay.csv
	FileReader fileReader=new FileReader(&quot;/opt/jmeter/apache-jmeter-3.3/bin/BoAo/Data/pPartNumbers.csv&quot;);
	c:/apache-jmeter-3.3/bin/Argos_PerformanceProjects/Data/HotSkus_pPartNumbers.csv
	C:\apache-jmeter-5.4\bin\NewPrePay\Data\pPartNumbers_PrePay1.csv
*/
	FileReader fileReader=new FileReader(&quot;C:/apache-jmeter-5.4/bin/NewPrePay/Data/pPartNumbers_PrePay1.csv&quot;);
	BufferedReader bufferReader= new BufferedReader(fileReader);
	ArrayList fileReaderList = new ArrayList();
	
	for(int j=0;j&lt;fileLimit;j++){
		if(j==0){
			bufferReader.readLine();
			}
		fileReaderList.add(bufferReader.readLine());
	}
	fileReader.close();
	bufferReader.close();
String sku=&quot;&quot;;
String BasketSku=&quot;&quot;;
//String BasketSkus=&quot;&quot;;
int randomz = 0;
String line=&quot;&quot;;
for(int i=0;i&lt;finalcount;i++){
//System.out.println(line);
//int value = rand.nextInt(100)
Random rand = new Random();
randomz = rand.nextInt(100);
//${__Random(1,100,Rand)};
//log.info(&quot;randomz-----------&gt;&quot;+randomz);
line=fileReaderList.get(randomz);
 
if(i == finalcount-1){
     sku = sku+&quot;{\&quot;product\&quot;:{\&quot;id\&quot;:&quot;+line+&quot;,\&quot;title\&quot;:\&quot;Duracell Plus Alkaline AAA Batteries - Pack of 4\&quot;},\&quot;quantity\&quot;:1}&quot;;
     BasketSku = BasketSku+&quot; {\&quot;productId\&quot;: \&quot;&quot;+line+&quot;\&quot;,\&quot;quantity\&quot;: 1}&quot;;
   
	}else{
		sku = sku+&quot;{\&quot;product\&quot;:{\&quot;id\&quot;:&quot;+line+&quot;,\&quot;title\&quot;:\&quot;Duracell Plus Alkaline AAA Batteries - Pack of 4\&quot;},\&quot;quantity\&quot;:1},&quot;;
		 BasketSku = BasketSku+&quot; {\&quot;productId\&quot;: \&quot;&quot;+line+&quot;\&quot;,\&quot;quantity\&quot;: 1},&quot;;

		}
}

vars.put(&quot;sku&quot;,sku);
vars.put(&quot;BasketSku&quot;,BasketSku);

log.info(&quot;Cookie added: &quot;+sku);

</stringProp>
            <stringProp name="TestPlan.comments">${TrolleySize}</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config_sku1" enabled="true">
            <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_PrePay.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">sku1</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
            <stringProp name="TestPlan.comments">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_PrePay.csv</stringProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config_sku2" enabled="true">
            <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_PrePay.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">sku2</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
            <stringProp name="TestPlan.comments">C:\apache-jmeter-5.4\bin\NewPrePay\Data\pPartNumbers_PrePay2.csv</stringProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config_pStorelist" enabled="true">
            <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pStorelist.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">pStoreId_1</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
            <stringProp name="TestPlan.comments">C:\apache-jmeter-5.4\bin\NewPrePay\Data\pStorelist.csv</stringProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue1 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue2 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue3 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue4 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue5 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue6 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue7 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue8 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue9 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue10 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue11 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

log.info(&quot;Cookie added: &quot;+cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue12 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue13 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue14 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;NPAC&quot;, &quot;true&quot; , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);
log.info(&quot;Cookie added: &quot;+cookie);

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_CheckOutGateway}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);
*/

log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1450580453">200
201</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout_Initialise" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;initNectar&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${id}:initialise</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue1 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue2 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue3 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue4 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue5 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue6 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue7 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue8 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue9 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue10 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue11 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

log.info(&quot;Cookie added: &quot;+cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue12 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue13 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue14 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;NPAC&quot;, &quot;true&quot; , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);
log.info(&quot;Cookie added: &quot;+cookie);





// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_UI}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="988652471">checkout/collection/payment/error</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSnapshot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${id}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_HPS_SessionID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">HPS_SessionID</stringProp>
            <stringProp name="RegexExtractor.regex">$.snapshot.customer.id</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_customerId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">customerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.snapshot.customer.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_availablePrepayOrder" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">availablePrepayOrder</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;availablePrepayOrder&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_amountValue" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">amountValue</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_title" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">title</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;title&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_foreName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">foreName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;foreName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_surName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">surName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;surName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1739107845">200
201
202</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAccountService" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_AccountService}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/account-api/users/${customerId}/addresses</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue1 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue2 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue3 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue4 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue5 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue6 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue7 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue8 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue9 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue10 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue11 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

log.info(&quot;Cookie added: &quot;+cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue12 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue13 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue14 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;NPAC&quot;, &quot;true&quot; , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);
log.info(&quot;Cookie added: &quot;+cookie);





// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_AccountService}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="988652471">checkout/collection/payment/error</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddPCI_card" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;paymentMethod&quot;: &quot;CARD_DEBIT&quot;,&#xd;
	&quot;currency&quot;: &quot;GBP&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${id}/payments</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_collectionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">collectionId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">&quot;id&quot;:&quot;9a09699c-b251-4bf0-8fd2-d1c69a045852&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_selectedStoreMapURL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">selectedStoreMapURL</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;selectedStoreMapURL&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_orderItemId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">orderItemId</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;orderItemId&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1450580453">200
201</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSnapshot" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${id}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/StoreAvailabilityView?krypto=nvmwUpZwOUJP0l8sVCJ2WDKPRAWiM3%2B04CHb1%2Fs3V%2FBbFj4vfoxpiWplh41S5QvifMgIwHB2omp2%0AAAb56ymJtL6qsJUifDkGVC39tk4dJvtfZPhqPs1zjWtj9TuSid7jMWwSjhb0IL0ijlAiIGYesK8r%0ApZOW6vXrCVVbCkxa7mgeHdRTuOWIKmVTHd9q4cR%2Fh9uTLfaR3ynHYRHb9fNJSzurk4g2bbWY5EFS%0ALsKEnhrplNqZGRtJ4GUSSpSkh2IdT5GcOjiIdu500QNsSFeyHJskqCpw6JgFdlxa0B73NRI7IJU%2F%0Asl%2BZ5CJs9LRDJ2EHNkVrI%2FCb8y3o8BqoHjw5xNSLjFskrvhq08uy2icffyRoJQ8HvE54gGjLX2V8%0AGCjT3arG3zrKy8P%2FHi9mzj0fYyFggZ4UbqYqZ9XVHV9J75M%3D</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_HPS_SessionID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">HPS_SessionID</stringProp>
            <stringProp name="RegexExtractor.regex">HPS_SessionID=(.*?)&amp;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_availablePrepayOrder" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">availablePrepayOrder</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;availablePrepayOrder&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_amountValue" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">amountValue</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_title" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">title</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;title&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_foreName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">foreName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;foreName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_surName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">surName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;surName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1739107845">200
201
202</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PlaceOrder" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/checkouts/${id}:place</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/PrepayOnlyPaymentInfo?catalogId=1500002951&amp;storeId=10151&amp;langId=110&amp;krypto=v%2Bv%2B7Dz2q8iLMiIBHPFx1BTX1VTvTGfwdjW%2FogT4L9%2BIdZbIJechexJ0YLYWKUdEYfJQxzNwzgRq%0AmXSK5kUI7mbBSo3Vh0iCkaEoUEz%2BfCWt%2BtfnJ9W9wsz81M%2FgAdddbGzkxtsR3j4aDzSc32t7QIt1%0AmHExccwR5kNqnoQruaFmuofoB54ZKsCFbMrNqPLmwH9IyT%2BsmbK35eRFzyqQ1M6%2Bead%2FGAXhlRqz%0AuYK%2BO8sujNEPlhG12s6w6RnpXsNBgkMJ2sGM208yvXt%2FC%2BcwM4VaVcVJfF%2B7ADUDKRIUZnpoAzC6%0AGX4oR8T098Jtnrq7ocAw6PSa3B54T844WD4JfVmysnD3j6fHfU3tu2D4KMhT9WmgCZbCi5Y%2B%2Fs3a%0AZbo79IG9TX9XEaBwmj3Jf41O4YlUhMYJRiGnVf5eRn8N9YXtwEw8ndQ2SH%2BQKSc3Pa2BpfD0J7e%2B%0AQnoCnvK342zM1YclVcIzaRbJk5JBR%2BLGt2z1Zv3o%2BVLdNfhO8zyl1vWBP7KhCWDEnTpfe4hCM4C8%0Aicd2g00QSXNRtnEEUTADerDDur6YlbAI1zTiBdtkw3FTj7y8QQJ6S7F8dgReh9DhFYnyHTjnIxSa%0A0B7kBMAeWT5m0rMv%2FAgtyIwzQ9y2g4k0SoKZvRvRrgQ81jv%2BKmvaPx%2BdE%2BxJiLSL2WCQ0SUnWR3p%0AmVopNKJIw0imqgaqQdo4x99e1FQtQ%2Bygu%2BRrwFoCuXOO3rX13%2BROWpTHSsvgWKEhsG%2Bm3B5imRy9%0AnRTA1s%2BZT%2BWLXTQfuV2t1BYXa8c5mGRCWmXTcf4TnjWNJqqIxA5WIWWHET%2B8scxgqT3NZe0Bpudp%0AZt17DkYJLzX1snmCPDETjqCMV0AyB5%2FNovkktJhGNvDGBM1x7S7KwhxZZRWFIeJugFI9I6uPmYoN%0AUuLLYk4y4hkTV52ttcWpRU76P59xCFHOTZAUnmua0mZyblLzGcXoZARwEpjE2iHHkWlfyQF0GVKy%0AtteKxb3OI1ocP3bDdpodh6UkXHgUEWI1DfQR3B0m%2F3m%2BfHRvQRMLid34PC%2Buqyzncag4CKIi0AOr%0A1REM9XRHrgoC2bvcXBIXTBLeFJZtFcp9z1lZlTNE1qhRpVIqYtz4uyrQEgWf9gImBU%2FGm%2FQodHUt%0A%2FNWyGsmpvZdOJpuaSnZBAkzfUi4HE%2B0l%2BSUDB0y4CG%2BDA17NIrKnh1%2Bg6W47jnnYzJQEP%2BVkHzEW%0AU7535Skk5yfkPMHC8JMLxsYpqeRP0RO8KHrwcspfFbc%3D</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_orderId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">orderId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_hash" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">hash</stringProp>
            <stringProp name="RegexExtractor.regex">hash&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1295060141">200201202</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderConfirmation" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_UI}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/confirmation/${orderId}/${hash}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://www.argos.co.uk/webapp/wcs/stores/servlet/PrepayOnlyPaymentInfo?catalogId=1500002951&amp;storeId=10151&amp;langId=110&amp;krypto=v%2Bv%2B7Dz2q8iLMiIBHPFx1BTX1VTvTGfwdjW%2FogT4L9%2BIdZbIJechexJ0YLYWKUdEYfJQxzNwzgRq%0AmXSK5kUI7mbBSo3Vh0iCkaEoUEz%2BfCWt%2BtfnJ9W9wsz81M%2FgAdddbGzkxtsR3j4aDzSc32t7QIt1%0AmHExccwR5kNqnoQruaFmuofoB54ZKsCFbMrNqPLmwH9IyT%2BsmbK35eRFzyqQ1M6%2Bead%2FGAXhlRqz%0AuYK%2BO8sujNEPlhG12s6w6RnpXsNBgkMJ2sGM208yvXt%2FC%2BcwM4VaVcVJfF%2B7ADUDKRIUZnpoAzC6%0AGX4oR8T098Jtnrq7ocAw6PSa3B54T844WD4JfVmysnD3j6fHfU3tu2D4KMhT9WmgCZbCi5Y%2B%2Fs3a%0AZbo79IG9TX9XEaBwmj3Jf41O4YlUhMYJRiGnVf5eRn8N9YXtwEw8ndQ2SH%2BQKSc3Pa2BpfD0J7e%2B%0AQnoCnvK342zM1YclVcIzaRbJk5JBR%2BLGt2z1Zv3o%2BVLdNfhO8zyl1vWBP7KhCWDEnTpfe4hCM4C8%0Aicd2g00QSXNRtnEEUTADerDDur6YlbAI1zTiBdtkw3FTj7y8QQJ6S7F8dgReh9DhFYnyHTjnIxSa%0A0B7kBMAeWT5m0rMv%2FAgtyIwzQ9y2g4k0SoKZvRvRrgQ81jv%2BKmvaPx%2BdE%2BxJiLSL2WCQ0SUnWR3p%0AmVopNKJIw0imqgaqQdo4x99e1FQtQ%2Bygu%2BRrwFoCuXOO3rX13%2BROWpTHSsvgWKEhsG%2Bm3B5imRy9%0AnRTA1s%2BZT%2BWLXTQfuV2t1BYXa8c5mGRCWmXTcf4TnjWNJqqIxA5WIWWHET%2B8scxgqT3NZe0Bpudp%0AZt17DkYJLzX1snmCPDETjqCMV0AyB5%2FNovkktJhGNvDGBM1x7S7KwhxZZRWFIeJugFI9I6uPmYoN%0AUuLLYk4y4hkTV52ttcWpRU76P59xCFHOTZAUnmua0mZyblLzGcXoZARwEpjE2iHHkWlfyQF0GVKy%0AtteKxb3OI1ocP3bDdpodh6UkXHgUEWI1DfQR3B0m%2F3m%2BfHRvQRMLid34PC%2Buqyzncag4CKIi0AOr%0A1REM9XRHrgoC2bvcXBIXTBLeFJZtFcp9z1lZlTNE1qhRpVIqYtz4uyrQEgWf9gImBU%2FGm%2FQodHUt%0A%2FNWyGsmpvZdOJpuaSnZBAkzfUi4HE%2B0l%2BSUDB0y4CG%2BDA17NIrKnh1%2Bg6W47jnnYzJQEP%2BVkHzEW%0AU7535Skk5yfkPMHC8JMLxsYpqeRP0RO8KHrwcspfFbc%3D</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1739107845">200
201
202</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">/checkout/collection/payment/</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">38</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">4</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RetreiveOrder" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CheckOutGateway}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/checkout-api-v2/orders/${orderId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/StoreAvailabilityView?krypto=nvmwUpZwOUJP0l8sVCJ2WDKPRAWiM3%2B04CHb1%2Fs3V%2FBbFj4vfoxpiWplh41S5QvifMgIwHB2omp2%0AAAb56ymJtL6qsJUifDkGVC39tk4dJvtfZPhqPs1zjWtj9TuSid7jMWwSjhb0IL0ijlAiIGYesK8r%0ApZOW6vXrCVVbCkxa7mgeHdRTuOWIKmVTHd9q4cR%2Fh9uTLfaR3ynHYRHb9fNJSzurk4g2bbWY5EFS%0ALsKEnhrplNqZGRtJ4GUSSpSkh2IdT5GcOjiIdu500QNsSFeyHJskqCpw6JgFdlxa0B73NRI7IJU%2F%0Asl%2BZ5CJs9LRDJ2EHNkVrI%2FCb8y3o8BqoHjw5xNSLjFskrvhq08uy2icffyRoJQ8HvE54gGjLX2V8%0AGCjT3arG3zrKy8P%2FHi9mzj0fYyFggZ4UbqYqZ9XVHV9J75M%3D</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Checkout-User-Id" elementType="Header">
                <stringProp name="Header.name">X-Checkout-User-Id</stringProp>
                <stringProp name="Header.value">${WC_SESSIONID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_availablePrepayOrder" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">availablePrepayOrder</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;availablePrepayOrder&quot; value=&quot;(.*?)&quot;/&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_email" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">email</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;suryakanth.kelmani@gmail.com&quot; /&gt;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_authToken3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authToken3</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;authToken&quot; value=&quot;(.*?)&quot; id=&quot;authtoken_1&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_amountValue" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">amountValue</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;amountValue&quot;  id=&quot;amountValue&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_title" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">title</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;title&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_foreName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">foreName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;foreName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_surName" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">surName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;surName&quot; value=&quot;(.*?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
