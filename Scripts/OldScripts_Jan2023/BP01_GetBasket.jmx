<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BP01_GetBasket_V1" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="pEnvURL_pt1" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_pt1</stringProp>
            <stringProp name="Argument.value">pt1.test-arg-uk.com</stringProp>
            <stringProp name="Argument.desc"> www.argos.co.uk   uat2.test-arg-uk.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_bo" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_bo</stringProp>
            <stringProp name="Argument.value">basket-gateway-v1-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.desc">basket-orchestrator-v1-prod-aws.public.eu-west-1.production.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_CIS" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_CIS</stringProp>
            <stringProp name="Argument.value">cis-gateway-v1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pTimer_Random" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Random</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pTimer_Min" elementType="Argument">
            <stringProp name="Argument.name">pTimer_Min</stringProp>
            <stringProp name="Argument.value">800</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_AccountService" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_AccountService</stringProp>
            <stringProp name="Argument.value">account-service-v1-pt.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_CheckOutGateway" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_CheckOutGateway</stringProp>
            <stringProp name="Argument.value">checkout-gateway-v2-pt-external.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.desc">checkout-gateway-v1-pt-external.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pEnvURL_UI" elementType="Argument">
            <stringProp name="Argument.name">pEnvURL_UI</stringProp>
            <stringProp name="Argument.value">ui-payment-pt1.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.desc">ui-payment-uat2.public.eu-west-1.staging.deveng.systems</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${__machineName()}_BP01_GetBasket_V1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">600</stringProp>
        <longProp name="ThreadGroup.start_time">1481116852000</longProp>
        <longProp name="ThreadGroup.end_time">1481116852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">400</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_pUserId_PrePayV1.csv" enabled="true">
          <stringProp name="filename">/opt/jmeter/apache-jmeter-3.3/bin/Argos_PerformanceProjects/Data/pUserId_PrePayV1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <stringProp name="TestPlan.comments">C:\apache-jmeter-3.3\bin\ArgosAWS_UK_PRD\PRD11thAug2021\Data\pUserId_PrePayV1.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="TrolleySize" enabled="true">
          <stringProp name="maximumValue">100</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">TrolleySize</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_TrolleySize_and_ProductCount" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

//int i = 1;
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));
//int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
//vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));

//1 - 90
if (( ${TrolleySize} &gt; 0) &amp;&amp;  (${TrolleySize} &lt; 91))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;1&quot;);
	}
//91-100

if (( ${TrolleySize} &gt; 91) &amp;&amp;  (${TrolleySize} &lt; 100))
	{
	  vars.put(&quot;BasketSize&quot;,&quot;1&quot;);
	}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cis" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CIS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login   ${pUserId}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_sessionId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">sessionId</stringProp>
            <stringProp name="RegexExtractor.regex">sessionId=(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="logonId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonId</stringProp>
                <stringProp name="Argument.value">${pUserId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="logonPassword" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">logonPassword</stringProp>
                <stringProp name="Argument.value">test1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="storeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">storeId</stringProp>
                <stringProp name="Argument.value">10151</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="langId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">langId</stringProp>
                <stringProp name="Argument.value">110</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_pt1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/webapp/wcs/stores/servlet/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/webapp/wcs/stores/servlet/Login    /webapp/wcs/stores/servlet/LoginService</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0(WindowsNT6.1;WOW64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/52.0.2743.116Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${pEnvURL_pt1}/webapp/wcs/stores/servlet/AccessMyAccount?langId=110&amp;storeId=10151&amp;returnURL=https%3A%2F%2Fwww.argos.co.uk%2Fwebapp%2Fwcs%2Fstores%2Fservlet%2FArgosStaticPageSecondLevel%3FincludeName%3Dargoscompetitions.htm%26catalogId%3D25051%26DM_PersistentCookieCreated%3Dtrue%26langId%3D110%26storeId%3D10151</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Initializaton for LoginCount and ProductIdCount" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;


//int i = 1;
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

int i = 1;
vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

//int matches = StringUtils.countMatches(new String(data), &quot;We&apos;re sorry but we don&apos;t&quot;);
//Currently out of stock for store collection
//LOGON_ERROR_USERNAME_INCORRECT OR errorCode

int matches = StringUtils.countMatches(new String(data), &quot;errorCode&quot;);
vars.put(&quot;LoginFailureCount&quot;, String.valueOf(matches));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue15 , &quot;${pEnvURL_pt1}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


log.info(&quot;Cookie added: &quot;+cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_Auth1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="TestPlan.comments">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_SESSIONID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_SESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_(.+?)=</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_USERACTIVITY" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_USERACTIVITY</stringProp>
            <stringProp name="RegexExtractor.regex">WC_USERACTIVITY_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegularExpressionExtractor_WC_AUTHENTICATION" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">WC_AUTHENTICATION</stringProp>
            <stringProp name="RegexExtractor.regex">WC_AUTHENTICATION_${WC_SESSIONID}=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cisSession" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_CIS}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cis-api/v2/refresh</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">9805952   basket-api/v2/basket/items</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">callOrigin</stringProp>
                <stringProp name="Header.value">argos</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue20 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue20 , &quot;${pEnvURL_CIS}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pConstant}</stringProp>
            <stringProp name="RandomTimer.range">${pDeviation}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${BasketSize}</stringProp>
          <stringProp name="TestPlan.comments">${BasketSize}</stringProp>
        </LoopController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyLoginSuccessfull" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(&quot;${LoginFailureCount}&quot; &gt; &quot;0&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration"></stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddItemToBasket" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;productId&quot;: &quot;${pProductId}&quot;,&#xd;
	&quot;quantity&quot;: 3&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/basket-api/v2/basket/items</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">9805952</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config_sku2" enabled="true">
              <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_PrePay.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">sku2</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
              <stringProp name="TestPlan.comments">C:\apache-jmeter-5.4\bin\NewPrePay\Data\pPartNumbers_PrePay2.csv</stringProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config_sku1" enabled="true">
              <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/ArgosAWS_UK_PT/Data/pPartNumbers_PrePay.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">pProductId</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
              <stringProp name="TestPlan.comments">C:\apache-jmeter-5.4\bin\NewPrePay\Data\pPartNumbers_PrePay1.csv</stringProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_Error" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Error</stringProp>
              <stringProp name="RegexExtractor.regex">error&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_StatusCode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">StatusCode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="TestPlan.comments">&quot;authToken&quot;: &quot;(.*?)&quot;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShellPreProcessor_transfer_cookies" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookie;

 
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue1 = vars.get(&quot;WC_USERACTIVITY&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_USERACTIVITY_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue1 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue2 = vars.get(&quot;COOKIE_WC_PERSISTENT&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_PERSISTENT&quot;, cookieValue2 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue3 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue3 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue4 = vars.get(&quot;COOKIE_Apache&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;Apache&quot;, cookieValue4 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue5 = vars.get(&quot;COOKIE_JSESSIONID&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, cookieValue5 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue6 = vars.get(&quot;COOKIE_WC_SESSION_ESTABLISHED&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_SESSION_ESTABLISHED&quot;, cookieValue6 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue7 = vars.get(&quot;COOKIE_WC_ACTIVEPOINTER&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_ACTIVEPOINTER&quot;, cookieValue7 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue8 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue8 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_PersonalizationCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PersonalizationCookie&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);



// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue10 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserSessionCookie&quot;, cookieValue10 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue11 = vars.get(&quot;COOKIE_UserRegistrationType&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserRegistrationType&quot;, cookieValue11 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue12 = vars.get(&quot;COOKIE_sessionId&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;sessionId&quot;, cookieValue12 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue13 = vars.get(&quot;COOKIE_AWSALB&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALB&quot;, cookieValue13 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue14 = vars.get(&quot;COOKIE_AWSALBCORS&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;AWSALBCORS&quot;, cookieValue14 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;WC_AUTHENTICATION&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;+vars.get(&quot;WC_SESSIONID&quot;)+&quot;&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1); 
ctx.getCurrentSampler().getCookieManager().add(cookie); 

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue15 = vars.get(&quot;COOKIE_UserPersistentSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;UserPersistentSessionCookie&quot;, cookieValue15 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);

// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue16 = vars.get(&quot;COOKIE_PostCodeSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;PostCodeSessionCookie&quot;, cookieValue16 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie); 

/*
// Retrieve the cookie value from a JMeter variable called &quot;myCookieValue&quot;
String cookieValue9 = vars.get(&quot;COOKIE_UserSessionCookie&quot;);
// Create a new Cookie and add it to the cookie manager
Cookie cookie = new Cookie(&quot;WC_AUTHENTICATION_&quot;, cookieValue9 , &quot;${pEnvURL_bo}&quot;, &quot;/&quot;, false, -1);
ctx.getCurrentSampler().getCookieManager().add(cookie);


*/



log.info(&quot;Cookie added: &quot;+cookie);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_ProductIdCount" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

//int i = 1;
//vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));

int matches = StringUtils.countMatches(new String(data), &quot;\&quot;error\&quot;&quot;);
vars.put(&quot;ProductIdCount&quot;, String.valueOf(matches));

log.info(vars.get(&quot;ProductIdCount&quot;));
//log.info(&quot;Invalid ProductId count is: &quot;+ProductIdCount);

/*
int ProductIdCount = 0;
vars.put(&quot;ProductIdCount&quot;, String.valueOf(i));
int matches = StringUtils.countMatches(new String(data), &quot;INVALID_PRODUCT&quot;);
vars.put(&quot;ProductIdCount&quot;, String.valueOf(matches));

*/

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBasket" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/basket-api/v2/basket</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_itemId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">itemId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;itemId&quot;:&quot;(.*?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor_basketFound" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">basketFound</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.collection.collectable</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_postCodes" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pPostCodes</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.deliverTo</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pStoreId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.collectFrom</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_productId_collectionStockCheck" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.items[?(@.collection.available==true)].productId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="TestPlan.comments">$.availability.items[*].productId     </stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_ContructURLforProducts" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String finalcount1 = vars.get(&quot;productId_matchNr&quot;);
int finalcount = 0;
finalcount = Integer.parseInt(finalcount1);

//log.info(&quot;productid count is-----------&gt;&quot;+finalcount);
String sku=&quot;&quot;;
String line=&quot;&quot;;

for (int i = 1; i &lt;= finalcount; i++)
{
	line=vars.get(&quot;productId_&quot;+i);
  //   log.info(&quot;productid count is-----------&gt;&quot;+line);

     if(i == finalcount)
     {
     sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1}&quot;;
     }
     
	else
		{
		sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1},&quot;;
		}
	
	}

vars.put(&quot;sku&quot;,sku);

//log.info(&quot;constructed sku is : &quot;+sku);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
            <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_VerifyGetBasket" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${stockCheck}&quot; == &quot;false&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">${__javaScript(&quot;${basketFound}&quot; == &quot;404&quot; OR &quot;${stockCheck}&quot; == &quot;false&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Exit current iteration &amp; go to next loop iteration" enabled="true">
            <intProp name="ActionProcessor.action">3</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_LocaliseBasket" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${stockCheck_1}&quot; != &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LocaliseBasket" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;collectFrom&quot;: &quot;${pStoreId}&quot; ,&#xd;
&quot;fulfilmentType&quot;: &quot;collection&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pEnvURL_bo}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/basket-api/v2/basket:localise</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/basket:localise      Payload &quot;deliverTo&quot;: &quot;${pPostCodes_1}&quot;,</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="RandCSVGuestReservation_pStorelist.csv" enabled="true">
              <stringProp name="TestPlan.comments">C:\apache-jmeter-3.3\bin\ArgosAWS_UK_PRD\PRD11thAug2021\Data\pStorelist.csv</stringProp>
              <stringProp name="filename">/opt/jmeter/apache-jmeter-5.4/bin/NewPrePay/Data/pStorelist.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">pStoreId</stringProp>
              <boolProp name="randomOrder">false</boolProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_storeName" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_stockCheck" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">stockCheck</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.basket.collection.collectable</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pStoreName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pStoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.stores.current.name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_pStoreId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pStoreId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.localisation.collectFrom</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.commons.lang3.StringUtils;
import java.util;

vars.put(&quot;stockCheck_1&quot;, String.valueOf(stockCheck_local_1));
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor_productId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.availability.items[?(@.collection.available==true)].productId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">$.items[0].productId</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_ContructURLforProducts" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String finalcount1 = vars.get(&quot;productId_matchNr&quot;);
int finalcount = 0;
finalcount = Integer.parseInt(finalcount1);

//log.info(&quot;productid count is-----------&gt;&quot;+finalcount);
String sku=&quot;&quot;;
String line=&quot;&quot;;

for (int i = 1; i &lt;= finalcount; i++)
{
	line=vars.get(&quot;productId_&quot;+i);
  //   log.info(&quot;productid count is-----------&gt;&quot;+line);

     if(i == finalcount)
     {
     sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1}&quot;;
     }
     
	else
		{
		sku = sku+&quot;{\&quot;productId\&quot;:&quot;+line+&quot;,\&quot;quantity\&quot;:1},&quot;;
		}
	
	}

vars.put(&quot;sku&quot;,sku);

//log.info(&quot;constructed sku is : &quot;+sku);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${pTimer_Min}</stringProp>
              <stringProp name="RandomTimer.range">${pTimer_Random}</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">$.availability.basket.collection.collectable   $.availability.items[?(@.collection.available==true)].productId</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
